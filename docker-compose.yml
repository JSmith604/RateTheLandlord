version: '3'
services:
  nginx:
    image: nginx:latest
    restart: unless-stopped
    container_name: nginx
    ports:
      - 80:80
      - 443:443
    networks:
      - internal
    volumes:
      - ./backend/public:/app/backend/public
      - ./frontend/public:/app/frontend/public
      - ./conf/nginx/:/etc/nginx:ro
      - ./logs/nginx/:/var/log/nginx
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      - frontend
      - backend

  backend:
    container_name: backend
    build:
      context: .
      dockerfile: ./docker/${ENVIRONMENT}/backend/Dockerfile
    restart: unless-stopped
    ports:
      - ${BEPORT}:${BEPORT}
    networks:
      - internal
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./.env:/app/.env
    depends_on:
      - db
    env_file: .env

  frontend:
    container_name: frontend
    build:
      context: .
      dockerfile: ./docker/${ENVIRONMENT}/frontend/Dockerfile
    restart: unless-stopped
    ports:
      - ${FEPORT}:${FEPORT}
    networks:
      - internal
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
      - ./logs/frontend:/root/.npm/_logs
    env_file:
      - ./.env
    depends_on:
      - backend

  db:
    image: postgres:12.0-alpine
    container_name: postgres
    platform: linux/amd64
    restart: unless-stopped
    env_file: .env
    environment:
      - POSTGRES_USER=${PGUSERNAME}
      - POSTGRES_PASSWORD=${PGPASSWORD}
      - POSTGRES_DB=${PGDATABASE}
    volumes:
      - data:/var/lib/postgresql/data/
    networks:
      - internal

  # db:
  #   container_name: postgres
  #   image: postgres
  #   ports:
  #     - '5433:${PGPORT}'
  #   volumes:
  #     - data:/data/db
  #   environment:
  #     - POSTGRES_USER=${PGUSERNAME}
  #     - POSTGRES_PASSWORD=${PGPASSWORD}
  #     - POSTGRES_DB=${PGDATABASE}
  #   networks:
  #     - internal

volumes:
  data:

networks:
  internal:
    name: internal
    driver: bridge
